# Application created by Collin Frame and Benjamin Antwi
# Some code modified from the PLTW Code Repository and examples.
# Images generated by https://www.clickminded.com/button-generator/ for use in this application.
# Some resolution changing features need to be modified to work correctly all the time
# https://collinframe.com

# Import required modules
from tkinter import *
import tkinter as tk
from PIL import Image, ImageTk
import turtle as trtl
import numpy as np

#define initial resolutiion and functions
funcres = "380x380"
def test_my_button():
    encode_screen.tkraise()
    #print("Would Encode")
    root.wm_geometry(funcres)
    root.title("Encoding")

def encode():
    trtl.setup()
    trtl.clearscreen()
    global mytext
    message = mytext.get()
    if message == "":
        message = " "
    
    characters_as_ints = []
    for cha in message:
        characters_as_ints.append(ord(cha))
    #print(characters_as_ints)

    characters_as_bits = []
    for integ in characters_as_ints:
        characters_as_bits.append('{0:08b}'.format(integ))
    #print(characters_as_bits)
    bits_as_ints = []
    for index in range(0,len(characters_as_bits)):
        for bit in characters_as_bits[index]:
            bits_as_ints.append(bit)
    #print(bits_as_ints)
    drawer = trtl.Turtle()
    drawer.penup()
    drawer.goto(-100, 150)
    drawer.shape("square")
    drawer.color("blue")
    drawer.speed(0)
    screen = trtl.getscreen()
    rows = 0 #adjustable image size
    message_length = len(bits_as_ints)
    index = 0
    while index < message_length:
        if index % 8 == 0:
            drawer.goto(-100, drawer.ycor()-21)
            rows+=1
        if bits_as_ints[index]=='1':
            drawer.stamp()
        drawer.forward(21)
        index = index + 1

    def create_image():
        im = Image.new('RGB', (8*21, rows*21), (255, 255, 255))
        index = 0
        image = np.array(im)
       # print(len(image), len(image[0]))
        row = 0
        col = 0
        while index < message_length:
            if bits_as_ints[index]=='1':
                fillSquare(image, row, col)
            index = index + 1
            col=col+1
            if index % 8 == 0:
                row=row+1
                col=0
            result = Image.fromarray(image, 'RGB')
            result.save("output.png")

    def fillSquare(image, row, col):
        for i in range(row*21, (row+1)*21):
            for j in range(col*21, (col+1)*21):
                image[i][j] = [0, 0, 255]
    create_image()
   # print("done!")
    trtl.bye()
    trtl.TurtleScreen._RUNNING = True
    global img
    global labelimg
    img = Image.open("output.png")
    img = img.resize((100, 100), Image.ANTIALIAS)
    img = ImageTk.PhotoImage(img)
    labelimg = Label(encode_screen, image = img)
    labelimg.grid(column=1,row=6)
    save_label = tk.Label(encode_screen, text="Results saved as output.png", 
    compound="center",
    font=("comic sans", 14),
    bd=0, 
    relief=tk.FLAT,
    fg="white",
    bg="#2c2f33")
    save_label.grid(column=1,row=5)

def decode():
    letter = 0
    im = Image.open("output.png")
    image = np.array(im)
    rows = len(image)
    cols = len(image[0])
   # print(rows, cols)
    DISTANCE_BETWEEN_BLOCKS = 21
    NUM_CHARACTERS = int(rows / DISTANCE_BETWEEN_BLOCKS)+1
    BITS_IN_A_BYTE = 8
    MAX_BITS = NUM_CHARACTERS * BITS_IN_A_BYTE
    my_array = []
    for letters in range(0,MAX_BITS):
        my_array.append(0)
    pos=0
    for i in range(0, rows,DISTANCE_BETWEEN_BLOCKS):
        for j in range(0,cols,DISTANCE_BETWEEN_BLOCKS):
            row_pixel = int(i + DISTANCE_BETWEEN_BLOCKS / 2)
            col_pixel = int(j + DISTANCE_BETWEEN_BLOCKS / 2)
            r,g,b= image[row_pixel][col_pixel]
            #print(r,g,b)
            if g < 255:
                my_array[pos]=1
            pos = pos + 1
   # print(my_array)
    message_as_bits = ''
    for bit in my_array:
        message_as_bits = message_as_bits + str(bit)
   # print(message_as_bits)
    decoded = ''
    for n in range(0,MAX_BITS):
        if n % 8 == 0:
            if letter != 0:
                decoded = decoded + chr(letter)
                letter = 0
            letter = int(message_as_bits[n]) * 128 + letter
        elif n % 8 == 1:
            letter = int(message_as_bits[n]) * 64 + letter
        elif n % 8 == 2:
            letter = int(message_as_bits[n]) * 32 + letter
        elif n % 8 == 3:
            letter = int(message_as_bits[n]) * 16 + letter
        elif n % 8 == 4:
            letter = int(message_as_bits[n]) * 8 + letter
        elif n % 8 == 5:
            letter = int(message_as_bits[n]) * 4 + letter
        elif n % 8 == 6:
            letter = int(message_as_bits[n]) * 2 + letter
        elif n % 8 == 7:
            letter = int(message_as_bits[n]) * 1 + letter
    decoderes = str(360+round(len(decoded)*5))
    root.wm_geometry(decoderes+"x380")
    #print(decoderes+"x380")
    #print(decoded)
    photo_label2.config(text="Decoded text: " + decoded)

def decode_info():
    #print("decoding")
    decode_screen.tkraise()
    root.wm_geometry(funcres)
    root.title("Decoding")

# main window
root = tk.Tk()
root.title("Encode & Decode")
root.wm_geometry("300x300")
root.configure(background='#2c2f33')

#button images
button_encode=tk.PhotoImage(file="button_encode2bd.gif")
button_encode.zoom(145,60)

button_decode=tk.PhotoImage(file="button_decode2bd.gif")
button_decode.zoom(145,60)

button_home=tk.PhotoImage(file="button_home2bd.gif")
button_home.zoom(145,65)

button_submit=tk.PhotoImage(file="button_submit2bd.gif")
button_submit.zoom(145,65)
# create empty frame
main = tk.Frame(root,
    bg="#2c2f33")
main.grid(column=0,row=0,sticky="news")
#encode label
mainphoto_label = tk.Label(main, text="Welcome! First click Encode to Start!", 
    compound="center",
    font=("comic sans", 14),
    bd=0, 
    relief=tk.FLAT,
    fg="white",

    bg="#2c2f33")
mainphoto_label.grid(column=1,row=1, padx=25)

#encode button
encode_btn = tk.Button(main,height=41, width=135,  text="Encode", command=test_my_button, image=button_encode)
encode_btn.grid(column=1,row=2,padx=65, pady=25)
def about():
    tk.messagebox.showinfo("Information", "Application created by Collin Frame and Benjamin Antwi. Some code modified from the PLTW Code Repository and examples. Images generated by https://www.clickminded.com/button-generator/ for use in this application. www.collinframe.com                 NOTE: This application is not production ready.")

about_btn = tk.Button(main, text="About", command=about)
about_btn.grid(column=1, row=5, padx=75, pady=55)

mainphoto_label2 = tk.Label(main, text="Now click Decode to read the messsage!", 
    compound="center",
    font=("comic sans", 14),
    bd=0, 
    relief=tk.FLAT,
    fg="white",
    bg="#2c2f33")
mainphoto_label2.grid(column=1,row=3, padx=25)
#decode button
decode_btn = tk.Button(main,height=42, width=138, bg="#2c2f33",text="Decode", command=decode_info, image=button_decode)
decode_btn.grid(column=1,row=4, padx=55, pady=15)
#home button function
def return_to_main():
    main.tkraise()
    root.title("Encode & Decode")
    root.wm_geometry("300x300")

#encode screen
encode_screen = tk.Frame(root)
encode_screen.grid(column=0,row=0,sticky="news")
url_label = tk.Label(encode_screen, text="Enter text to encode: ", 
    compound="center",
    font=("comic sans", 14),
    bd=0, 
    relief=tk.FLAT,
    fg="white",
    bg="#2c2f33")
url_label.grid(column=1,row=1, pady=30, padx=57)
mytext = tk.Entry(encode_screen,  font=("comic sans", 14)) # change font
mytext.grid(column=1,row=2)
submit_btn = tk.Button(encode_screen,height=49, width=129, text="Submit", command=encode, image=button_submit)
submit_btn.grid(column=1,row=3, padx=130, pady=5)

photo_label = tk.Label(encode_screen, text="Result will apear here", 
    compound="center",
    font=("comic sans", 14),
    bd=0, 
    relief=tk.FLAT,
    fg="white",
    bg="#2c2f33")
    
photo_label.grid(column=1,row=5)

home_btn = tk.Button(encode_screen,height=51, width=128, pady=5, text="Home", command=return_to_main, image=button_home)
home_btn.grid(column=1,row=4)

# decode screen

decode_screen = tk.Frame(root)
decode_screen.grid(column=0,row=0,sticky="news")
url_label2 = tk.Label(decode_screen, text="Click the 'Submit' button to decode your file: ", 
    compound="center",
    font=("comic sans", 14),
    bd=0, 
    relief=tk.FLAT,
    fg="white",
    bg="#2c2f33")
url_label2.grid(column=1,row=1,padx=33, pady=30 )
submit_dec = tk.Button(decode_screen, height=50, width=128, pady=5, text="Decode", command=decode, image=button_submit)
submit_dec.grid(column=1,row=3,padx=50)

photo_label2 = tk.Label(decode_screen, text="Result will appear here", 
compound="center",
font=("comic sans", 20),
bd=0, 
relief=tk.FLAT,
fg="white",
bg="#2c2f33")
photo_label2.grid(column=1,row=6, padx=10,pady=30)
home_btn = tk.Button(decode_screen, height=51, width=131, bg="#2c2f33",text="Home", command=return_to_main, image=button_home)
home_btn.grid(column=1,row=4, pady=5,)
decode_screen.configure(background='#2c2f33')
encode_screen.configure(background='#2c2f33')
main.tkraise()
root.mainloop()